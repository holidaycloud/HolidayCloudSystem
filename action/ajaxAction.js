// Generated by CoffeeScript 1.8.0
(function() {
  var CouponCtrl, CustomerCtrl, MemberCtrl, ProductCtrl, SettingCtrl, async;

  ProductCtrl = require("./../ctrl/productCtrl");

  CustomerCtrl = require("./../ctrl/customerCtrl");

  SettingCtrl = require("./../ctrl/settingCtrl");

  MemberCtrl = require("./../ctrl/memberCtrl");

  CouponCtrl = require("./../ctrl/couponCtrl");

  async = require("async");

  exports.dashboard = function(req, res) {
    return async.auto({
      pieAnalysis: function(cb) {
        return CouponCtrl.pieAnalysis(req.session.member.ent._id, function(err, res) {
          return cb(err, res);
        });
      },
      locations: function(cb) {
        return CustomerCtrl.locations(req.session.member.ent._id, function(err, res) {
          return cb(err, res);
        });
      }
    }, function(err, results) {
      return res.render("./page/dashboard", {
        data: results.pieAnalysis,
        locations: results.locations
      });
    });
  };

  exports.profile = function(req, res) {
    return res.render("./page/profile", {
      member: req.session.member
    });
  };

  exports.images = function(req, res) {
    return res.render("./page/images");
  };

  exports.setting = function(req, res) {
    return async.parallel([
      function(cb) {
        return SettingCtrl.webConfigDetail(req.session.member.ent._id, function(err, results) {
          return cb(err, results);
        });
      }, function(cb) {
        return SettingCtrl.weixinConfigDetail(req.session.member.ent._id, function(err, results) {
          return cb(err, results);
        });
      }
    ], function(err, results) {
      if (results != null) {
        return res.render("./page/setting", {
          web: results[0].data,
          weixin: results[1].data
        });
      } else {
        return res.status(500).end();
      }
    });
  };

  exports.productList = function(req, res) {
    return ProductCtrl.list(req.session.member.ent._id, function(err, results) {
      if (results.data != null) {
        return res.render("./page/productList", {
          products: results.data
        });
      } else {
        return res.status(500).end();
      }
    });
  };

  exports.userList = function(req, res) {
    return CustomerCtrl.list(req.session.member.ent._id, function(err, results) {
      if (results.data != null) {
        return res.render("./page/userList", {
          customers: results.data
        });
      } else {
        return res.status(500).end();
      }
    });
  };

  exports.members = function(req, res) {
    return MemberCtrl.fulllist(req.session.member.ent._id, function(err, results) {
      if (results.data != null) {
        return res.render("./page/members", {
          members: results.data
        });
      } else {
        return res.status(500).end();
      }
    });
  };

  exports.couponList = function(req, res) {
    return res.render("./page/couponList");
  };

  exports.couponAjaxList = function(req, res) {
    var dir, draw, length, order, orderArr, search, start, statusArr;
    orderArr = ["code", "ent", "name", "status", "customer", "useTime", "startDate"];
    statusArr = ["未使用", "已使用"];
    draw = req.body.draw;
    start = req.body.start;
    length = req.body.length;
    order = orderArr[parseInt(req.body.order[0].column)];
    dir = req.body.order[0].dir;
    search = req.body.search.value;
    return CouponCtrl.ajaxList(req.session.member.ent._id, start, length, order, dir, search, function(err, results) {
      var c, coupons, _i, _len;
      coupons = results.data.coupons;
      for (_i = 0, _len = coupons.length; _i < _len; _i++) {
        c = coupons[_i];
        c.status = statusArr[c.status];
        c.useTime = c.useTime != null ? new Date(c.useTime).Format("yyyy-MM-dd hh:mm:ss") : "";
        c.customer = (c.customer != null) && (c.customer.loginName != null) ? c.customer.loginName : "未领取";
        c.startDate = "" + (new Date(c.startDate).Format("yyyy-MM-dd")) + "至" + (new Date(c.endDate).Format("yyyy-MM-dd"));
        delete c.endDate;
      }
      return res.json({
        draw: draw,
        recordsTotal: results.data.totalSize,
        recordsFiltered: results.data.totalSize,
        data: coupons
      });
    });
  };

}).call(this);
